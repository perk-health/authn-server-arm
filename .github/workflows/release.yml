name: Release

on:
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  compileLinuxArm64:
    name: Compile for Linux Arm64
    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker
        uses: docker/setup-docker-action@v2

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17

      - name: Mod download
        env:
          VERSION: ${{ github.ref }}
          GOOS: linux
          GOARCH: arm64
          CGO_ENABLED: 1
        run: go mod download

      - name: Compile
        env:
          VERSION: ${{ github.ref }}
          GOOS: linux
          GOARCH: arm64
          CGO_ENABLED: 1
        run: |
          go build \
            -ldflags "-extldflags -static -X main.VERSION=${VERSION##*/v}" \
            -o dist/authn-linux-arm64
      - uses: actions/upload-artifact@v2
        with:
          name: authn-linux-arm64
          path: dist/authn-linux-arm64

  # compileLinuxArm64:
  #   name: Compile for Linux Arm64
  #   runs-on: buildjet-2vcpu-ubuntu-2204-arm

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.17
  #     - name: Mod download
  #       env:
  #         VERSION: ${{ github.ref }}
  #         GOOS: linux
  #         GOARCH: arm64
  #         CGO_ENABLED: 1
  #       run: go mod download

  #     - name: compile
  #       run: |
  #         go build \
  #           -ldflags "-extldflags -static -X main.VERSION=${VERSION##*/v}" \
  #           -o dist/authn-linux-arm64
  #       env:
  #         VERSION: ${{ github.ref }}
  #         GOOS: linux
  #         GOARCH: arm64
  #         CGO_ENABLED: 1

  # - uses: actions/upload-artifact@v2
  #   with:
  #     name: authn-linux-arm64
  #     path: dist/authn-linux-arm64

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [compileLinuxArm64]
    # needs: [compileLinuxAmd64, compileLinuxArm64, windows64, macos64]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true

      - name: Upload Linux64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./authn-linux64/authn-linux64
          asset_name: authn-linux64
          asset_content_type: application/octet-stream

      - name: Upload Windows64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./authn-windows64.exe/authn-windows64.exe
          asset_name: authn-windows64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Macos64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./authn-macos64/authn-macos64
          asset_name: authn-macos64
          asset_content_type: application/octet-stream

  register:
    name: Register on Docker Hub
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Get Dockerfile
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: authn-linux64

      - run: |
          chmod a+x authn-linux64

      - name: VERSION
        id: version
        run: |
          echo "::set-output name=number::${VERSION##*/v}"
        env:
          VERSION: ${{ github.ref }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v1
        with:
          repository: keratin/authn-server
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tags: latest,${{ steps.version.outputs.number }}
