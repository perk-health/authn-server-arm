name: Release

on:
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # compileLinuxAmd64:
  #   name: Compile for Linux AMD 64
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.17
  #     - run: go mod download

  #     - name: compile
  #       run: |
  #         go build \
  #           -ldflags "-extldflags -static -X main.VERSION=${VERSION##*/v}" \
  #           -o dist/authn-linux64
  #       env:
  #         VERSION: ${{ github.ref }}
  #         GOOS: linux
  #         GOARCH: amd64
  #         CGO_ENABLED: 1

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: authn-linux64
  #         path: dist/authn-linux64

  compileLinuxArm64v2:
    name: Compile for Linux Arm64v2
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.17
      - run: go mod download
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: aarch64
          distro: ubuntu20.04

          # Not required, but speeds up builds
          # githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: authn-linux-arm64v2
            version: ${{ github.ref }}
            goos: linux
            goarch: arm64
            gco_enabled: 1

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                apt-get update -q -y
                apt-get install -q -y git
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which
                ;;
              alpine*)
                apk update
                apk add git
                ;;
            esac

          # Produce a binary artifact and place it in the mounted volume
          run: |
            go mod download
            go build \
              -ldflags "-extldflags -static -X main.VERSION=${VERSION##*/v}" \
              -o /artifacts/${artifact_name}

  # compileLinuxArm64:
  #   name: Compile for Linux Arm64
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.17
  #     - run: go mod download

  #     - name: compile
  #       run: |
  #         go build \
  #           -ldflags "-extldflags -static -X main.VERSION=${VERSION##*/v}" \
  #           -o dist/authn-linux64
  #       env:
  #         VERSION: ${{ github.ref }}
  #         GOOS: linux
  #         GOARCH: arm64
  #         CGO_ENABLED: 1

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: authn-linux-arm64
  #         path: dist/authn-linux-arm64

  # windows64:
  #   name: Compile for Windows
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.17
  #     - run: go mod download
  #     - run: sudo apt install mingw-w64

  #     - name: compile
  #       run: |
  #         go build \
  #           -ldflags "-X main.VERSION=${VERSION##*/v}" \
  #           -o dist/authn-windows64.exe
  #       env:
  #         VERSION: ${{ github.ref }}
  #         GOOS: windows
  #         GOARCH: amd64
  #         CGO_ENABLED: 1
  #         CC: x86_64-w64-mingw32-gcc

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: authn-windows64.exe
  #         path: dist/authn-windows64.exe

  # macos64:
  #   name: Compile for MacOS
  #   runs-on: macos-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.17
  #     - run: go mod download

  #     - name: compile
  #       run: |
  #         go build \
  #           -ldflags "-X main.VERSION=${VERSION##*/v}" \
  #           -o dist/authn-macos64
  #       env:
  #         VERSION: ${{ github.ref }}
  #         GOOS: darwin
  #         GOARCH: amd64
  #         CGO_ENABLED: 1

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: authn-macos64
  #         path: dist/authn-macos64

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [compileLinuxArm64v2]
    # needs: [compileLinuxAmd64, compileLinuxArm64, windows64, macos64]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true

      - name: Upload Linux64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./authn-linux64/authn-linux64
          asset_name: authn-linux64
          asset_content_type: application/octet-stream

      - name: Upload Windows64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./authn-windows64.exe/authn-windows64.exe
          asset_name: authn-windows64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Macos64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./authn-macos64/authn-macos64
          asset_name: authn-macos64
          asset_content_type: application/octet-stream

  register:
    name: Register on Docker Hub
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Get Dockerfile
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: authn-linux64

      - run: |
          chmod a+x authn-linux64

      - name: VERSION
        id: version
        run: |
          echo "::set-output name=number::${VERSION##*/v}"
        env:
          VERSION: ${{ github.ref }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v1
        with:
          repository: keratin/authn-server
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tags: latest,${{ steps.version.outputs.number }}
